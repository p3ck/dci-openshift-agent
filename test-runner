#!/bin/bash
#
# Copyright (C) 2021 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

PID2=
RET=1

finish() {
    echo "finish $*"

    if [ -n "$PID" ]; then
        PGID=$(ps -o pgid= "$PID" | grep -o '[0-9]*')

        if [ -n "$PGID" ]; then
            kill -KILL -"$PGID"
        else
            echo "Unable to find process group for $PID"
            kill "$PID"
        fi

        wait "$PID"
        RET=$?
    fi

    if [ "$LOCATION" = "no-check" ]; then
        RET=0
    elif [ -r output ]; then
        # Keep in sync with UI URL task in dci-openshift-agent.yml and dci-openshift-app-agent.yml
        LOCATION="$(grep -v sed output | sed -n -e 's@^.*Follow the log at: \(.*/jobs/.*/jobStates\).*@\1@p'| tr '\n' ' ')"

        # It could have failed before the information step
        if [ -z "$LOCATION" ]; then
            [ $RET -ne 0 ] || RET=1
            LOCATION="pre-run"
        fi
    else
        # Script failed before launching the agent
        [ $RET -ne 0 ] || RET=1
        LOCATION="preparation"
    fi

    if [ $RET = 0 ]; then
        VOTE="+1"
    else
        VOTE="-1"
    fi

    if [ $RET = 0 ]; then
        VOTE_RESULT="SUCCESS"
    elif [ $RET -gt 128 ]; then
        VOTE_RESULT="KILLED"
    else
        VOTE_RESULT="FAILURE"
    fi

    if [ -n "$VIRT" ]; then
        HWTYPE="libvirt:$VIRT"
    else
        HWTYPE="baremetal"
    fi

    if [ "$LOCATION" = "no-check" ]; then
        VOTE_RESULT="- dci-check-change no check (not a code change)"
    else
        VOTE_RESULT="- dci-check-change $LOCATION : $VOTE_RESULT tested on $HWTYPE"
    fi

    $BASEDIR/send-feedback $DIR "$VOTE_RESULT" "autogenerated:dci-check-change" $VOTE

    if [ -n "$PID2" ]; then
        kill $PID2
    fi

    cd

    if [ -n "$GERRIT_SSH_ID" ]; then
        ssh-agent -k
    fi

    # Workaround to delete any temporary directory created without u+w
    find "${DIR}" -type d -not -perm -u=w -exec chmod u+w {} \;
    rm -rf $DIR

    exit $RET
}

# If passed an argument, do a tail -f on the output file in the
# background
do_wait() {
    PID=$!

    if [ -n "$1" ]; then
        while [ ! -r output ]; do
            sleep 1
        done
        tail -f output&
        PID2=$!
    fi

    wait $PID

    RET=$?
    unset PID

    if [ $RET != 0 ]; then
        exit $RET
    fi
}

BASEDIR=$(cd $(dirname $0); pwd)

if [ $# -lt 1 ]; then
    echo "Usage: $0 (--virt|--sno|--assisted|--no-check) (-n) <change directory> (-p <prefix>) (-p2 <prefix>) (<kubeconfig path>)] (<options for agents>)" 1>&2
    exit 1
fi

VIRT=
DCI_NAME=
KCFG=
DO_VOTE=
PREFIX=
PREFIX2=

if [ -r /etc/dci-openshift-agent/config ]; then
    . /etc/dci-openshift-agent/config
fi

# needed by send-feddback
export GERRIT_USER
export DO_VOTE

if [ "$1" = "--virt" ]; then
    VIRT="virt"
    DCI_NAME=${DCI_NAME:-"libvirt"}
    shift
elif [ "$1" = "--sno" ]; then
    VIRT="sno"
    DCI_NAME=${DCI_NAME:-"sno"}
    shift
elif [ "$1" = "--assisted" ]; then
    VIRT="assisted"
    DCI_NAME=${DCI_NAME:-"assisted"}
    shift
elif [ "$1" = "--no-check" ]; then
    VIRT="no-check"
    shift
fi

if [ "$1" = "-n" ]; then
    unset DO_VOTE
    shift
fi

DIR=$1
shift

if [ "$1" = "-p" ]; then
    shift
    PREFIX="-p $1"
    shift
fi

if [ "$1" = "-p2" ]; then
    shift
    PREFIX2="-p $1"
    shift
fi

if [ -r "$1" ] && [[ "$1" =~ /.*/kubeconfig ]]; then
    KCFG="$1"
    shift
fi

# indexed array variable
declare -a OPTS

if [ -n "$DCI_NAME" ]; then
    OPTS+=(-e dci_name=$DCI_NAME)
fi

if [ -n "$VIRT" ]; then
    OPTS+=(-e dci_configuration=$VIRT)
fi

if [ ! -d $DIR ]; then
    echo "No such directory $DIR" 1>&2
    exit 1
fi

if [ ! -x $BASEDIR/extract-dependencies ]; then
    BASEDIR=/usr/share/dci-openshift-agent
fi

if [ -n "$GERRIT_SSH_ID" ]; then
    eval $(ssh-agent)
    ssh-add ~/.ssh/"$GERRIT_SSH_ID"
fi

trap finish 0

set -x

PIPELINEID="pipeline-id:${DCI_QUEUE_JOBID:=noqueue.$$}"
CHANGEID=$(basename "$DIR")
CHANGEID=${CHANGEID%%-*}

# extract github or gerrit from the path
KIND=$(basename $(dirname "$DIR"))
cd "$DIR"

if [ "$KIND" = gerrit ]; then
    PROJECT=$(jq -r .project "$CHANGEID.json")
    TAG="gerrit:$PROJECT-$CHANGEID"
    URL="https://softwarefactory-project.io/r/#/c/$CHANGEID/"
else
    PR=${CHANGEID##*-pr}
    # Strip generated name
    PR=${PR%-*}
    TAG="github:$CHANGEID"
    REPO=$(jq -r .head.repo.full_name github.json)
    URL="https://github.com/$REPO/pull/$PR"
fi

# do not run checks on doc only changes in dci-openshift-(app-)?agent

# make sure the change is only on dci-openshift-(app-)?agent or it was passed --no-check
if [ "$VIRT" = "no-check" ] || { [ -d dci-openshift-agent -o -d dci-openshift-app-agent ] && [ $(ls|wc -l) -eq 2 ]; }; then
    if [ "$VIRT" = "no-check" ]; then
        NUMBER_CODE_FILES=0
    else
        NUMBER_CODE_FILES=$(cd dci-openshift-*agent; git diff-tree --no-commit-id --name-only -r HEAD|egrep '(ansible.cfg|group_vars/all|plays/scripts/get-logs|dci-check-change|test-runner|send-feedback|extract-dependencies|dci-openshift-(app-)?agent-ctl|\.(yml|j2|py))'|wc -l)
    fi
    if [ "$NUMBER_CODE_FILES" -eq 0 ]; then
        PID=
        LOCATION="no-check"
        exit 0
    fi
fi

# compute the command line arguments according to the extracted
# directories

if [ -d dci-openshift-agent ]; then
    ln -s "$PWD"/dci-openshift-agent/* .
    rm -f ansible.cfg dci-openshift-agent.yml
    cp dci-openshift-agent/ansible.cfg .
    sed -e "s@include_tasks:\s*plays/@include_tasks: $PWD/dci-openshift-agent/plays/@" < "$PWD"/dci-openshift-agent/dci-openshift-agent.yml > "$PWD"/dci-openshift-agent.yml
    # force to use the roles from the change
    sed -i -e "s@\(^\s*roles_path\s*=\s*\)@\1$PWD/dci-openshift-agent/common-roles/:$PWD/dci-openshift-agent/roles/:@" ansible.cfg
    sed -i -e "s@\(^\s*roles_path\s*=\s*\)@\1$PWD/dci-openshift-agent/common-roles/:$PWD/dci-openshift-agent/roles/:@" "$PWD"/dci-openshift-agent/samples/ocp_on_libvirt/ansible.cfg
    CMD="$PWD/dci-openshift-agent/dci-openshift-agent-ctl"
    if [ "$VIRT" = virt ]; then
        VIRTDIR="$PWD"/dci-openshift-agent/samples/ocp_on_libvirt
    elif [ "$VIRT" = sno ]; then
        VIRTDIR="$PWD"/dci-openshift-agent/samples/sno_on_libvirt
    elif [ "$VIRT" = assisted ]; then
        VIRTDIR="$PWD"/dci-openshift-agent/samples/assisted
    fi
    # needed for ctl to take the settings.yml from the change
    export CONFIG_DIR="$PWD"
    ln -s /etc/dci-openshift-agent/*-settings.yml /etc/dci-openshift-agent/*hosts . || :
else
    ln -s /usr/share/dci-openshift-agent/* .
    rm -f ansible.cfg
    cp /usr/share/dci-openshift-agent/ansible.cfg /usr/share/dci-openshift-agent/dci-openshift-agent.yml .
    CMD=dci-openshift-agent-ctl
    if [ $VIRT = virt ]; then
        VIRTDIR=/var/lib/dci-openshift-agent/samples/ocp_on_libvirt
    elif [ $VIRT = sno ]; then
        VIRTDIR=/var/lib/dci-openshift-agent/samples/sno_on_libvirt
    elif [ $VIRT = assisted ]; then
        VIRTDIR=/var/lib/dci-openshift-agent/samples/assisted
    fi
fi

if [ -d baremetal-deploy ]; then
    sed -i -e "s@/var/lib/dci-openshift-agent/baremetal_deploy_repo/@$PWD/baremetal-deploy/@g" ansible.cfg
fi

for conf in $(ls -d *config 2> /dev/null); do
    sed -i -e "s@/var/lib/dci-openshift-agent/$conf/@$PWD/$conf/@g" ansible.cfg
    settings="$(find $conf -name '*settings.yml')"
    if [ -n "$settings" ]; then
        sed -i -e "s@/var/lib/dci-openshift-agent/$conf/@$PWD/$conf/@g" $settings
        export CONFIG_DIR="$PWD/$conf"
    fi
done

if [ -d dci-ansible ]; then
    sed -i -e "s@/usr/share/dci/\(modules\|module_utils\|action_plugins\)@$PWD/dci-ansible/\1@g" -e "s@/usr/share/dci/callback/@$PWD/dci-ansible/callback/@" ansible.cfg
    # for d-o-a-a-ctl
    export DCI_ANSIBLE_DIR=$PWD/dci-ansible
fi

DCI_ANSIBLE_ROLES=
for d in $(ls -d ansible-role-dci-* 2> /dev/null); do
    if [ -r "$d/tasks/main.yml" ]; then
        sed -i -e "s@\(roles_path\s*=\s*\)@\1${PWD}:@" ansible.cfg
        # for d-o-a-a-ctl
        if [ -z "$DCI_ANSIBLE_ROLES" ]; then
            export DCI_ANSIBLE_ROLES="$PWD"
        else
            export DCI_ANSIBLE_ROLES="$DCI_ANSIBLE_ROLES:$PWD"
        fi
    fi
done

# create a python virtualenv if there is any project with a
# requirements.txt into the changes
REQS=$(ls */requirements.txt 2> /dev/null)

if [ -n "$REQS" ]; then
    rm -rf .venv
    virtualenv .venv
    . .venv/bin/activate

    # substitute dependencies from the changes into requirements.txt
    for req in $REQS; do
        reqdir=$(dirname "$req")
        if [ -r $reqdir/setup.py ]; then
            module=$(sed -n -e 's/\s*name="\(.*\)",/\1/p' $reqdir/setup.py)
            if [ -n "$module" ]; then
                sed -i -e "s@$module.*@-e $PWD/$reqdir/@" */requirements.txt
            fi
        fi
    done

    # install python dependencies into the virtualenv
    for req in $REQS; do
        pip install -r "$req"
        cd $(dirname "$req")
        python setup.py develop || :
        cd -
    done
fi

if [ -d python-dciclient ]; then
    export DCI_VAULT_CLIENT=$PWD/.venv/bin/dci-vault-client
fi

GIT_REPOS=
for repo in $(ls -d */.git);do
    GIT_REPOS="\"$PWD/${repo%/.git}\",$GIT_REPOS"
done

if [ -n "$GIT_REPOS" ]; then
    OPTS+=(-e "{\"dev_gits_to_components\":[$GIT_REPOS]}")
fi

FEEDBACK="Starting dci-check-change job."

$BASEDIR/send-feedback $DIR "$FEEDBACK" "autogenerated:dci-check-change" 0

if [ -z "$KCFG" ]; then
    if [ -n "$VIRT" ]; then
        # Clear out any previous dns/dhcp config entries
        # libvirt/ipi and libvirt/assisted have conflicting dns/dhcp
        cd "$VIRTDIR"
        if [ "$VIRT" = virt ]; then
            setsid ansible-playbook -v libvirt_destroy.yml &
            do_wait
            setsid ansible-playbook -v libvirt_up.yml &
            do_wait
        elif [ "$VIRT" = assisted ]; then
            FQDN=$(hostname -f)
	    DNS=$(nmcli dev show | awk '/IP4.DNS/ { print $2; exit }')
            sed -e "s/@FQDN@/$FQDN/; s/@DNS@/$DNS/" < hosts.in > hosts
        fi
        sudo cp hosts /etc/dci-openshift-agent/
        cd "$DIR"
    fi

    # needed for dci-openshift-agent-ctl
    export DCI_OPENSHIFT_AGENT_DIR="$PWD"
    export ANSIBLE_CONFIG="$PWD/ansible.cfg"

    setsid $CMD $PREFIX -s -v -- -v "${OPTS[@]}" -e "{\"dci_url\": \"$URL\", \"dci_tags\": [\"debug\", \"$TAG\", \"$PIPELINEID\"]}" "$@" >& output &

    do_wait 1
fi

# do not continue if d-o-a-a-ctl is not installed
if ! type -p dci-openshift-app-agent-ctl; then
    exit $RET
fi

# no side effect from d-o-a
unset ANSIBLE_CONFIG
# default app if not specified in the env
APP_NAME=${APP_NAME:=basic_example}

OC=oc
for p in /usr/local/bin "$HOME"/clusterconfigs-*; do
    if [ -x "$p/oc" ]; then
        OC="$p/oc"
        break
    fi
done

if [ -n "$KCFG" ]; then
    export KUBECONFIG="$KCFG"
    CLUSTER=$($OC config view -o jsonpath='{.clusters[0].name}')
else
    # get the name of the cluster from the ansible output
    CLUSTER=$(sed -n -e 's@.*changed:.*/clusterconfigs-\([^\"]*\)/kubeconfig.*@\1@p' output)
    export KUBECONFIG="$HOME/clusterconfigs-$CLUSTER/kubeconfig"
fi

# keep in sync with d-o-a-ctl
if [ -s "/var/tmp/$CLUSTER.dci.job_id" ]; then
    OPTS+=(-e "dci_previous_job_id=$(cat /var/tmp/$CLUSTER.dci.job_id)")
fi

if [ -d test-network-function ]; then
    OPTS+=(-e "test_network_function_repo=$PWD")
fi

if [ -d openshift-preflight ]; then
    OPST+=(-e "preflight_source_dir=$PWD/openshift-preflight")
fi

# support the none app to use the default from the system
APP_OPT=

if [ -s "$KUBECONFIG" ]; then
    if [ -d dci-openshift-app-agent ]; then
        # inject the common roles from doa if needed
        if [ -d dci-openshift-agent ]; then
            sed -i -e "s@\(^\s*roles_path\s*=\s*\)@\1$PWD/dci-openshift-agent/common-roles/:@" dci-openshift-app-agent/ansible.cfg
        fi
        cd dci-openshift-app-agent
        ln -s /etc/dci-openshift-app-agent/dcirc.sh .
        ln -s /etc/dci-openshift-app-agent/*-settings.yml /etc/dci-openshift-app-agent/*hosts . || :
        export CONFIG_DIR="$PWD"
        if [ "$APP_NAME" != "none" ]; then
            APP_OPT="-e dci_config_dir=$PWD/samples/$APP_NAME"
        fi
        setsid $PWD/dci-openshift-app-agent-ctl $PREFIX2 -s -d -v -- -v "${OPTS[@]}" -e "{\"dci_url\": \"$URL\", \"dci_tags\": [\"debug\", \"$TAG\", \"$PIPELINEID\"]}" $APP_OPT -e dci_name="$APP_NAME" "$@" &>> ../output &
        cd ..
    else
        unset CONFIG_DIR
        if [ "$APP_NAME" != "none" ]; then
            APP_OPT="-e dci_config_dir=/var/lib/dci-openshift-app-agent/samples/$APP_NAME"
        fi
        setsid dci-openshift-app-agent-ctl $PREFIX2 -s -v -- -v "${OPTS[@]}" -e "{\"dci_url\": \"$URL\", \"dci_tags\": [\"debug\", \"$TAG\", \"$PIPELINEID\"]}" $APP_OPT -e dci_name="$APP_NAME" "$@" &>> output &
    fi

    if [ -n "$KCFG" ]; then
        do_wait 1
    else
        do_wait
    fi
else
    echo "$KUBECONFIG is not readable"
    exit 1
fi

exit $RET

# test-runner ends here
